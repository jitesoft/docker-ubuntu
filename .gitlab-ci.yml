include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

stages:
  - check
  - download
  - build
  - scan

variables:
  ARCHITECTURES: "amd64 arm64 armhf ppc64el s390x"

check:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
  variables:
    GIT_STRATEGY: none
  parallel:
    matrix:
      - { VERSION: "14.04", DIST: "trusty", TAGS: "trusty,14.04" }
      - { VERSION: "16.04", DIST: "xenial", TAGS: "xenial,16.04" }
      - { VERSION: "18.04", DIST: "bionic", TAGS: "bionic,18.04" }
      - { VERSION: "20.04", DIST: "focal", TAGS: "focal,20.04,latest,lts" }
      - { VERSION: "20.10", DIST: "groovy", TAGS: "groovy,20.10,next" }
  script:
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS"
    - touch sha-${DIST}.txt
    - CURR=$(cat sha-${DIST}.txt)
    - |
      if [ "${CURR}" != "$(cat SHA256SUMS)" ]; then
        echo "Build ${DIST}"
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[DIST]=${DIST}" -F "variables[TAGS]=${TAGS}" -F "variables[VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "Only scan ${DIST}"
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[DIST]=${DIST}" -F "variables[VERSION]=${VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  artifacts:
    paths:
      - sha-${DIST}.txt
  cache:
    policy: pull
    key: ubuntu-${DIST}-sha
    paths:
      - sha-${DIST}.txt

gpg:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: check
  rules:
    - if: "$BUILD"
      when: always
    - if: "$SCAN"
      when: never
    - when: never
  script:
    - if [ -f keys.out ]; then gpg --import keys.out; fi
    - gpg --list-keys ${GPG_KEY} || (gpg --keyserver pgp.mit.edu --recv-keys "${GPG_KEY}" || gpg --keyserver keyserver.pgp.com --recv-keys "${GPG_KEY}" || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${GPG_KEY}")
    - gpg --export > keys.out
  artifacts:
    paths:
      - keys.out
  cache:
    key: ubuntu.gpg.keyring
    policy: pull
    paths:
      - keys.out

download:
  rules:
    - if: "$SCAN"
      when: never
    - if: '$BUILD'
      when: always
    - when: never
  needs:
    - job: gpg
      artifacts: true
  stage: download
  parallel:
    matrix:
      - { ARCH: "amd64", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "arm64", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "armhf", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "ppc64el", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "s390x", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "i386", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  before_script:
    - gpg --import keys.out
  script:
    - |
      if [ "${ARCH}" == "i386" ]; then
        if [ "${DIST}" != "xenial" ] && [ "${DIST}" != "trusty" ] && [ "${DIST}" != "bionic" ]; then
          echo "Arch is i386, can not build ${DIST} for i386 so skipping job"
          exit 0
        fi
      fi
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS.gpg"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz"
    - gpg --verify SHA256SUMS.gpg SHA256SUMS
    - grep "${ARCH}" SHA256SUMS | sha256sum -c -
    - DOCKER_ARCH=$(helper arch ${ARCH})
    - mkdir -p artifacts/${DOCKER_ARCH}
    - mv ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz artifacts/${DOCKER_ARCH}/ubuntu-root.tar.gz
    - mv SHA256SUMS sha-${DIST}.txt
  artifacts:
    when: on_success
    paths:
      - artifacts/
      - sha-${DIST}.txt

.build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE},jitesoft/ubuntu,ghcr.io/jitesoft/ubuntu" "${TAGS}")
    - ARCH_LIST=$(helper archlist ${ARCHITECTURES})
    - docker buildx build --platform ${ARCH_LIST} --push ${TAG_LIST} --progress plain --build-arg VERSION=${VERSION} --build-arg NAME=${DIST} .
  cache:
    policy: push
    key: ubuntu-${DIST}-sha
    paths:
      - sha-${DIST}.txt
  tags: [ jitesoft, buildx, protected ]

build:xenial-trusty-bionic:
  extends: .build
  rules:
    - if: "$SCAN"
      when: never
    - if: '($DIST == "xenial" || $DIST == "trusty" || $DIST == "bionic") && $BUILD'
      when: on_success
    - when: never
  needs:
    - download
  variables:
    ARCHITECTURES: "amd64 arm64 armhf ppc64el s390x i386"

build:
  rules:
    - if: "$SCAN"
      when: never
    - if: '($DIST != "xenial" && $DIST != "trusty" && $DIST != "bionic") && $BUILD'
      when: on_success
    - when: never
  extends: .build
  needs:
    - download

scan:
  tags: [ protected, jitesoft ]
  rules:
    - if: '$DIST'
      when: always
    - when: never
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${DIST}"
    GIT_STRATEGY: none
