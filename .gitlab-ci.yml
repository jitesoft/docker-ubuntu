include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - download
  - build
  - scan

variables:
  ARCHITECTURES: "amd64 arm64 armhf i386 ppc64el s390x"

.download:
  stage: download
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache gnupg grep curl
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh
    - mv helper.sh helper
    - chmod +x helper
  script:
    - if [ -f "keys.out" ]; then gpg --import keys.out; fi
    - gpg --list-keys ${GPG_KEY} || gpg --receive-keys D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81
    - gpg --export > keys.out
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS.gpg"
    - |
      for ARCH in ${ARCHITECTURES}; do
        curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz"
      done
    - gpg --verify SHA256SUMS.gpg SHA256SUMS
    - sha256sum -c SHA256SUMS
    - |
      for ARCH in ${ARCHITECTURES}; do
        DOCKER_ARCH=$(./helper arch ${ARCH})
        mkdir -p artifacts/${DOCKER_ARCH}
        mv ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz artifacts/${DOCKER_ARCH}/ubuntu-root.tar.gz
      done
  artifacts:
    paths:
      - artifacts/
    expire_in: 20 minutes
  cache:
    key: ubuntu.gpg.keyring
    paths:
      - keys.out

.build:
  variables:
    DOCKER_BUILDKIT: 1
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker/buildx:latest
  before_script:
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh
    - mv helper.sh helper
    - chmod +x helper
  script:
    - TAG_LIST=$(./helper "${CI_REGISTRY_IMAGE},jitesoft/ubuntu" "${TAGS}")
    - ARCH_LIST=$(./helper archlist ${ARCHITECTURES})
    - echo "Building for following architectures ${ARCH_LIST}."
    - docker buildx build --platform ${ARCH_LIST} --push ${TAG_LIST} --progress plain --build-arg VERSION=${VERSION} --build-arg NAME=${DIST} .
  tags:
    - jitesoft
    - buildx
    - amd64
    - arm7
    - arm64
    - x86
    - ppc64le
    - s390x

download:eoan:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: eoan

download:disco:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: disco

download:cosmic:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: cosmic

download:bionic:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: bionic

build:eoan:
  extends: .build
  needs:
    - download:eoan
  variables:
    DIST: eoan
    VERSION: "19.10"
    TAGS: "eoan,19.10,latest"

build:disco:
  extends: .build
  needs:
    - download:disco
  variables:
    DIST: disco
    VERSION: "19.04"
    TAGS: "disco,19.04,lts"

build:cosmic:
  extends: .build
  needs:
    - download:cosmic
  variables:
    DIST: cosmic
    VERSION: "18.10"
    TAGS: "cosmic,18.10"

build:bionic:
  extends: .build
  needs:
    - download:bionic
  variables:
    DIST: bionic
    VERSION: "18.04"
    TAGS: "bionic,18.04"

scan:eoan:
  needs:
    - build:eoan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:eoan"
    GIT_STRATEGY: none

scan:disco:
  needs:
    - build:disco
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:disco"
    GIT_STRATEGY: none

scan:cosmic:
  needs:
    - build:cosmic
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:cosmic"
    GIT_STRATEGY: none

scan:bionic:
  needs:
    - build:bionic
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:bionic"
    GIT_STRATEGY: none
