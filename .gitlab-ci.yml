include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

stages:
  - check
  - download
  - build
  - scan

variables:
  ARCHITECTURES: "amd64 arm64 armhf ppc64el s390x"

check:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
  variables:
    GIT_STRATEGY: none
  parallel:
    matrix:
      - { VERSION: "18.04", DIST: "bionic" }
      - { VERSION: "19.10", DIST: "eoan" }
      - { VERSION: "20.04", DIST: "focal" }
      - { VERSION: "20.10", DIST: "groovy" }
  script:
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS"
    - touch sha-${DIST}.txt
    - CURR=$(cat sha-${DIST}.txt)
    - |
      if [ "${CURR}" != "$(cat SHA256SUMS)" ]; then
        echo "Build ${DIST}"
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[DIST]=${DIST}" -F "variables[VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "Only scan ${DIST}"
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[DIST]=${DIST}" -F "variables[VERSION]=${VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  artifacts:
    paths:
      - sha-${DIST}.txt
  cache:
    policy: pull
    key: ubuntu-${DIST}-sha
    paths:
      - sha-${DIST}.txt

.download:
  stage: download
  parallel:
    matrix:
      - { ARCH: "amd64", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "arm64", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "armhf", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "ppc64el", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "s390x", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
      - { ARCH: "i386", GPG_KEY: "D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81" }
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - echo "${ARCH}"
    - echo "${GPG_KEY}"
    - if [ "${ARCH}" == "i386" ] && [[ "${DIST}" != "bionic" || "${DIST}" != "eoan" ]]; then exit 0; fi
    - gpg --receive-keys "${GPG_KEY}"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS.gpg"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz"
    - gpg --verify SHA256SUMS.gpg SHA256SUMS
    - sha256sum -c SHA256SUMS
    - DOCKER_ARCH=$(helper arch ${ARCH})
    - mkdir -p artifacts/${DOCKER_ARCH}
    - mv ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz artifacts/${DOCKER_ARCH}/ubuntu-root.tar.gz
    - mv SHASUMS sha-${DIST}.txt
  artifacts:
    paths:
      - artifacts/
      - sha-${DIST}.txt
    expire_in: 20 minutes

download:eoan:
  extends: .download
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "eoan" && $BUILD'
      when: always
    - when: never

download:groovy:
  extends: .download
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "groovy" && $BUILD'
      when: always
    - when: never

download:focal:
  extends: .download
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "focal" && $BUILD'
      when: always
    - when: never

download:bionic:
  extends: .download
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "bionic" && $BUILD'
      when: always
    - when: never

.build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE},jitesoft/ubuntu,ghcr.io/jitesoft/ubuntu" "${TAGS}")
    - ARCH_LIST=$(helper archlist ${ARCHITECTURES})
    - docker buildx build --platform ${ARCH_LIST} --push ${TAG_LIST} --progress plain --build-arg VERSION=${VERSION} --build-arg NAME=${DIST} .
  cache:
    policy: push
    key: ubuntu-${DIST}-sha
    paths:
      - sha-${DIST}.txt
  tags: [ jitesoft, buildx, protected ]

build:eoan:
  extends: .build
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "eoan" && $BUILD'
      when: always
    - when: never
  needs:
    - download:eoan
  before_script:
    - ARCHITECTURES="${ARCHITECTURES} i386"
  variables:
    DIST: eoan
    VERSION: "19.10"
    TAGS: "eoan,19.10"

build:groovy:
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "groovy" && $BUILD'
      when: always
    - when: never
  extends: .build
  needs:
    - download:groovy
  variables:
    DIST: groovy
    VERSION: "20.10"
    TAGS: "groovy,20.10,next"

build:focal:
  extends: .build
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "focal" && $BUILD'
      when: always
    - when: never
  needs:
    - download:focal
  variables:
    DIST: focal
    VERSION: "20.04"
    TAGS: "focal,20.04,latest,lts"

build:bionic:
  rules:
    - if: "$SCAN"
      when: never
    - if: '$DIST == "bionic" && $BUILD'
      when: always
    - when: never
  extends: .build
  needs:
    - download:bionic
  before_script:
    - ARCHITECTURES="${ARCHITECTURES} i386"
  variables:
    DIST: bionic
    VERSION: "18.04"
    TAGS: "bionic,18.04"

scan:eoan:
  tags: [ protected, jitesoft ]
  rules:
    - if: "$SCAN"
      when: always
    - if: '$DIST'
      when: always
    - when: never
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:eoan"
    GIT_STRATEGY: none

scan:groovy:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  rules:
    - if: "$SCAN"
      when: always
    - if: '$DIST'
      when: always
    - when: never
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:groovy"
    GIT_STRATEGY: none

scan:focal:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  rules:
    - if: "$SCAN"
      when: always
    - if: '$DIST'
      when: always
    - when: never
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:focal"
    GIT_STRATEGY: none

scan:bionic:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  rules:
    - if: "$SCAN"
      when: always
    - if: '$DIST'
      when: always
    - when: never
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:bionic"
    GIT_STRATEGY: none
