include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

stages:
  - download
  - build
  - scan

variables:
  ARCHITECTURES: "amd64 arm64 armhf i386 ppc64el s390x"

.download:
  only:
    changes:
      - Dockerfile
      - .gitlab-ci.yml
  except:
    variables:
      - $ONLY == "CONTAINER_SCAN"
  stage: download
  variables:
    GIT_STRATEGY: none
    GPG_KEY: D2EB44626FDDC30B513D5BB71A5D6C4C7DB87C81
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache gnupg grep curl
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh
    - mv helper.sh helper
    - chmod +x helper
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - gpg --list-keys ${GPG_KEY} || gpg --receive-keys ${GPG_KEY}
    - gpg --export > keys.out
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS"
    - curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/SHA256SUMS.gpg"
    - |
      for ARCH in ${ARCHITECTURES}; do
        curl -OsS "https://partner-images.canonical.com/core/${DIST}/current/ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz"
      done
    - gpg --verify SHA256SUMS.gpg SHA256SUMS
    - sha256sum -c SHA256SUMS
    - |
      for ARCH in ${ARCHITECTURES}; do
        DOCKER_ARCH=$(./helper arch ${ARCH})
        mkdir -p artifacts/${DOCKER_ARCH}
        mv ubuntu-${DIST}-core-cloudimg-${ARCH}-root.tar.gz artifacts/${DOCKER_ARCH}/ubuntu-root.tar.gz
      done
  artifacts:
    paths:
      - artifacts/
    expire_in: 20 minutes
  cache:
    key: ubuntu.gpg.keyring
    paths:
      - keys.out

.build:
  only:
    changes:
      - Dockerfile
      - .gitlab-ci.yml
  except:
    variables:
      - $ONLY == "CONTAINER_SCAN"
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE},jitesoft/ubuntu,quay.io/jitesoft/ubuntu" "${TAGS}")
    - ARCH_LIST=$(helper archlist ${ARCHITECTURES})
    - docker buildx build --platform ${ARCH_LIST} --push ${TAG_LIST} --progress plain --build-arg VERSION=${VERSION} --build-arg NAME=${DIST} .
  tags: [ jitesoft, buildx, protected ]

download:eoan:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: eoan

download:groovy:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: groovy

download:focal:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: focal

download:bionic:
  extends: .download
  variables:
    GIT_STRATEGY: none
    DIST: bionic

build:eoan:
  extends: .build
  needs:
    - download:eoan
  variables:
    DIST: eoan
    VERSION: "19.10"
    TAGS: "eoan,19.10"

build:groovy:
  extends: .build
  needs:
    - download:groovy
  variables:
    DIST: groovy
    VERSION: "20.10"
    TAGS: "groovy,20.10,next"

build:focal:
  extends: .build
  needs:
    - download:focal
  variables:
    DIST: focal
    VERSION: "20.04"
    TAGS: "focal,20.04,latest,lts"
    ARCHITECTURES: "amd64 arm64"

build:bionic:
  extends: .build
  needs:
    - download:bionic
  variables:
    DIST: bionic
    VERSION: "18.04"
    TAGS: "bionic,18.04"

scan:eoan:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:eoan"
    GIT_STRATEGY: none

scan:groovy:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:groovy"
    GIT_STRATEGY: none

scan:focal:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:focal"
    GIT_STRATEGY: none

scan:bionic:
  tags: [ protected, jitesoft ]
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:bionic"
    GIT_STRATEGY: none
